#################################################################################################################################
# This document contains the syntax for the Nikola programming language
# Tokens will be indicated using regular expressions.
# Syntax will be indicated using a modified-EBNF grammar.
#################################################################################################################################
#################################################################################################################################
### Tokens
# Units: 1_m2_s_2
# Numeric literals
integer-literal ::= [0-9]+([eE][+-]?[0-9]+)(integer-suffx)?(unit-suffix)?
integer-suffix ::= [lL]|[sS][bB]|([lL][lL])
real-literal ::= [0-9]*\.[0-9]+([eE][+-]?[0-9]+)?(unit-suffix)?
unit-suffix ::== _[a-zA-Z]+(_?[0-9]+)?(_[a-zA-Z]+(_?[0-9]+))*
complex-literal ::=  (real-iteral)[iI](unit-suffix)?

# Character-based literals
char-literal ::= '\\?[any ASCII character]'
string-literal ::= "(\\?[any ASCII character])*"

# Identifies
identifier ::= [_a-zA-Z][-_a-zA-Z]*

#################################################################################################################################
### Syntax

# Top-Level
Nikola-program ::= {declaration}
declaration ::=
      module-declaration 
    | import-declaration
    | namespace-declaration 
    | class-declaration
    | enum-declaration
    | function-declaration
    | alias-declaration
    | typedef-declaration
    | variable-declaration # Note: global variables may only be constants
member-declaration ::= 
      class-declaration 
    | enum-declaration
    | function-declaration
    | alias-declaration 
    | variable-declaration
scoped-declaration ::=
      function-declaration
    | alias-declaration 
    | variable-declaration

# Declaration definitions
module-declaration ::= "module" module-name ";"
module-name ::= identifier {. identifier}

import-declaration ::= ["export"] import-statement 
import-statement ::=
    "import" module-name ";"
    "import" module-name "with" module-name ";"
    "import" module-name "as" identifier ";"

namespace-declaration ::= "namespace" namespace-identifier "{" {declaration} "}"
namespace-identifier ::= identifier {:: identifier}

class-declaration ::= class-preamble [class-definition] ";" 
class-preamble ::= ["export"] "let" "class" identifier template-specialization [":" template-declaration]
class-definition ::= "{" {member-declaration} "}"

enum

function-declaration ::= (function-preamble | operator-preamble) [":" template-declaration] [function-definition] ";"
function-preamble ::= ["export"] "let" identifier "(" [function-arg-declaration-list] ")" ["->" return-type-list]
operator-preamble ::= ["export"] "let" "operator" operator "(" {function-arg-declaration} ")" ["->" return-type-list] 
function-arg-declaration-list ::= function-arg-declaration {"," function-arg-declaration}
function-arg-declaration ::= identifier [":" type ["..."]]
return-type-list ::= type {"," type}
function-definition ::= "=" "{" {scoped-declaration} "}"

